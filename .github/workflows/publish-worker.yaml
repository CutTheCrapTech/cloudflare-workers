# .github/workflows/publish-worker.yml
# This workflow handles the deployment of Cloudflare Workers.
# It is triggered by a workflow_call from the `publish.yaml` workflow upon a new release,
# or can be triggered manually via workflow_dispatch for a specific package.
name: Deploy Workers

on:
  workflow_dispatch:
    inputs:
      package_name:
        description: "The scoped name of the worker package to deploy (e.g., '@cloudflare-workers/site')."
        required: true
        type: string
  workflow_call:
    inputs:
      published_packages:
        description: "JSON array of published packages from the changesets/action."
        required: true
        type: string
    secrets:
      INFISICAL_CLIENT_SECRET:
        required: true

jobs:
  prepare-deployment:
    name: Prepare Deployment Matrix
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.prepare_matrix.outputs.packages_json }}
    steps:
      - name: Prepare Deployment Matrix
        id: prepare_matrix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PACKAGES_JSON="[]"
          # Manual workflow_dispatch run
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            PACKAGE_NAME="${{ inputs.package_name }}"
            echo "Manual run for package: $PACKAGE_NAME"
            LATEST_VERSION=$(gh release list --repo $GITHUB_REPOSITORY --limit 1 --json tagName --jq ".[] | select(.tagName | startswith(\"$PACKAGE_NAME@\")) | .tagName" | sed "s#$PACKAGE_NAME@##")
            if [ -z "$LATEST_VERSION" ]; then
              echo "::error::Could not find any releases for package $PACKAGE_NAME."
              exit 1
            fi
            echo "Found latest version: $LATEST_VERSION"
            PACKAGES_JSON=$(jq -n --arg name "$PACKAGE_NAME" --arg version "$LATEST_VERSION" '[{"name": $name, "version": $version}]')
          # Automated workflow_call run
          else
            echo "Automated run from published packages."
            PACKAGES_JSON='${{ inputs.published_packages }}'
          fi

          {
            echo "packages_json<<EOF"
            echo "$PACKAGES_JSON"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

  deploy-workers:
    name: Deploy ${{ matrix.package.name }}
    needs: prepare-deployment
    if: ${{ needs.prepare-deployment.outputs.packages != '[]' && needs.prepare-deployment.outputs.packages != '' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read # To download release assets
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.prepare-deployment.outputs.packages) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
        with:
          version: 10

      - name: Set up Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: "lts/*"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Set environment
        id: env
        run: |
          BRANCH_NAME=${{ github.ref_name }}
          if [ "$BRANCH_NAME" = "main" ] || [ "$BRANCH_NAME" = "prod" ]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [ "$BRANCH_NAME" = "staging" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
          echo "Using environment: $(cat $GITHUB_OUTPUT)"

      - name: Load .env file
        shell: bash
        run: |
          if [ -f "./.env" ]; then
            echo "Sourcing .env file..."
            grep -v '^[[:space:]]*#' ./.env | grep -v '^[[:space:]]*$' | grep '=' >> $GITHUB_ENV
            echo "Finished processing .env file for GITHUB_ENV."
          else
            echo -e "\u001b[31mError: .env file not found at ./.\u001b[0m"
            exit 1
          fi

      # Get cloudflare account id Infisical
      - name: Get cloudflare account id from Infisical
        uses: Infisical/secrets-action@a663da43e1541832614bfd9dcf9ab67381ea2b98 # v1.0.12
        id: infisical_ro
        with:
          method: "universal"
          domain: ${{ env.INFISICAL_URL }}
          client-id: ${{ env.INFISICAL_CLIENT_ID }}
          client-secret: ${{ secrets.INFISICAL_CLIENT_SECRET }}
          project-slug: ${{ env.INFISICAL_PROJECT_SLUG }}
          env-slug: ${{ steps.env.outputs.environment }}
          secret-path: "/tofu"
          export-type: "env"

      # Get cloudflare token from Infisical
      - name: Get cloudflare token from Infisical
        uses: Infisical/secrets-action@a663da43e1541832614bfd9dcf9ab67381ea2b98 # v1.0.12
        id: infisical_rw
        with:
          method: "universal"
          domain: ${{ env.INFISICAL_URL }}
          client-id: ${{ env.INFISICAL_CLIENT_ID }}
          client-secret: ${{ secrets.INFISICAL_CLIENT_SECRET }}
          project-slug: ${{ env.INFISICAL_PROJECT_SLUG }}
          env-slug: ${{ steps.env.outputs.environment }}
          secret-path: "/tofu_rw"
          export-type: "env"

      # Sanitize package name for Infisical paths
      - name: Sanitize package name
        id: sanitize
        run: |
          SANITIZED_NAME=$(echo "${{ matrix.package.name }}" | sed 's/@//g' | sed 's/\//-/g')
          echo "name=$SANITIZED_NAME" >> $GITHUB_OUTPUT
          echo "Sanitized package name: $SANITIZED_NAME"

      # Get worker vars from Infisical
      # WORKER_VARS will be available as environment variable
      - name: Get worker vars from Infisical
        id: infisical_worker_vars
        uses: Infisical/secrets-action@a663da43e1541832614bfd9dcf9ab67381ea2b98 # v1.0.12
        with:
          method: "universal"
          domain: ${{ env.INFISICAL_URL }}
          client-id: ${{ env.INFISICAL_CLIENT_ID }}
          client-secret: ${{ secrets.INFISICAL_CLIENT_SECRET }}
          project-slug: ${{ env.INFISICAL_PROJECT_SLUG }}
          env-slug: ${{ steps.env.outputs.environment }}
          secret-path: "/cloudflare_worker_env/${{ steps.sanitize.outputs.name }}/vars"
          export-type: "env"

      # Get worker secrets from Infisical
      - name: Get worker secrets from Infisical
        id: infisical_worker_secrets
        uses: Infisical/secrets-action@a663da43e1541832614bfd9dcf9ab67381ea2b98 # v1.0.12
        with:
          method: "universal"
          domain: ${{ env.INFISICAL_URL }}
          client-id: ${{ env.INFISICAL_CLIENT_ID }}
          client-secret: ${{ secrets.INFISICAL_CLIENT_SECRET }}
          project-slug: ${{ env.INFISICAL_PROJECT_SLUG }}
          env-slug: ${{ steps.env.outputs.environment }}
          secret-path: "/cloudflare_worker_env/${{ steps.sanitize.outputs.name }}/secrets"
          export-type: "file"
          file-output-path: "/worker-secrets.env"

      - name: Deploy to Cloudflare
        env:
          CLOUDFLARE_API_TOKEN: ${{ env.TF_VAR_cloudflare_gha_workers_deployment }}
          CLOUDFLARE_ACCOUNT_ID: ${{ env.TF_VAR_cloudflare_account_id }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e

          PACKAGE_NAME="${{ matrix.package.name }}"
          PACKAGE_VERSION="${{ matrix.package.version }}"
          SANITIZED_PACKAGE_NAME="${{ steps.sanitize.outputs.name }}"
          TAG_NAME="${PACKAGE_NAME}@${PACKAGE_VERSION}"

          # Store absolute path to secrets file before changing directories
          WORKER_SECRETS_FILE="$(pwd)/worker-secrets.env"

          # Create unique temporary directory
          TEMP_DIR="deploy_${SANITIZED_PACKAGE_NAME}_${{ github.run_id }}_${{ github.run_attempt }}"
          mkdir -p "$TEMP_DIR"

          echo "Deploying $PACKAGE_NAME@$PACKAGE_VERSION (sanitized: $SANITIZED_PACKAGE_NAME)"

          # Download and extract deployment artifact
          echo "Downloading and extracting dist.zip from ${TAG_NAME}"
          gh release download "$TAG_NAME" --pattern "dist.zip" --output "$TEMP_DIR/dist.zip"
          if [ $? -ne 0 ]; then
            echo "::error::Could not download dist.zip for ${TAG_NAME}."
            exit 1
          fi
          unzip "$TEMP_DIR/dist.zip" -d "$TEMP_DIR"

          SKIP_SECRETS_UPLOAD="false"
          # Validate secrets file exists and has content
          if [ ! -f "$WORKER_SECRETS_FILE" ]; then
            echo "::warning::Worker secrets file not found at $WORKER_SECRETS_FILE"
            SKIP_SECRETS_UPLOAD="true"
          fi
          if [ ! -s "$WORKER_SECRETS_FILE" ]; then
            echo "::warning::Worker secrets file is empty at $WORKER_SECRETS_FILE"
            SKIP_SECRETS_UPLOAD="true"
          fi

          # Change to dist directory for wrangler commands
          cd "$TEMP_DIR/dist"

          # Only inject vars if WORKER_VARS is set
          if [ -n "$WORKER_VARS" ]; then
            # Check if wrangler.toml already has [vars] section
            if grep -q "^\[vars\]" wrangler.toml; then
              echo "::error::[vars] section already exists in wrangler.toml"
              echo "Either manage vars in wrangler.toml OR in Infisical, not both"
              exit 1
            fi

            # Inject vars from Infisical (includes [vars] header)
            echo "Injecting vars from Infisical..."
            echo "$WORKER_VARS" >> wrangler.toml
          fi

          # Verify authentication
          if ! npx wrangler whoami > /dev/null 2>&1; then
            echo "::error::Failed to authenticate with Cloudflare"
            if [ -n "$WORKER_VARS" ]; then
              echo "::error::Might also be because infisical WORKER_VARS secret is breaking toml syntax. Double-check."
            fi
            exit 1
          fi

          # Check if worker exists before trying versions workflow
          echo "Checking if worker exists..."
          set +e
          WORKER_CHECK_OUTPUT=$(npx wrangler versions list --env ${{ steps.env.outputs.environment }} 2>&1)
          WORKER_CHECK_EXIT=$?
          set -e

          # Check for specific "worker doesn't exist" error, not just any failure
          if [ $WORKER_CHECK_EXIT -eq 0 ]; then
            echo "Worker exists - using versions workflow"

            # Upload version
            echo "Uploading worker version v$PACKAGE_VERSION"
            npx wrangler versions upload \
              --env ${{ steps.env.outputs.environment }} \
              --tag "v$PACKAGE_VERSION" \
              --message "Deployed $PACKAGE_NAME@$PACKAGE_VERSION"

            # Get the latest version ID
            echo "Getting latest version ID..."
            VERSION_ID=$(npx wrangler versions list \
              --env ${{ steps.env.outputs.environment }} \
              --json | jq -r 'sort_by(.metadata.created_on) | reverse | .[0].id')

            echo "Latest version ID: $VERSION_ID"

            # Deploy the version FIRST
            echo "Deploying version $VERSION_ID at 100%"
            npx wrangler versions deploy "$VERSION_ID" \
              --env ${{ steps.env.outputs.environment }} \
              --percentage 100 \
              --message "Deploy Version v$PACKAGE_VERSION" \
              --yes
          elif echo "$WORKER_CHECK_OUTPUT" | grep -q "This Worker does not exist" || echo "$WORKER_CHECK_OUTPUT" | grep -q "code: 10007"; then
            echo "Worker does not exist - performing initial deployment"
            npx wrangler deploy \
              --env ${{ steps.env.outputs.environment }}
          else
            echo "::error::Failed to check worker status. Output:"
            echo "$WORKER_CHECK_OUTPUT"
            exit 1
          fi

          if [ "$SKIP_SECRETS_UPLOAD" = "false" ]; then
            # Upload secrets AFTER deployment
            echo "Uploading secrets..."
            npx wrangler secret bulk \
              --env ${{ steps.env.outputs.environment }} \
              "$WORKER_SECRETS_FILE"
          else
            echo "Skipping secrets upload (SKIP_SECRETS_UPLOAD is set)"
          fi

          echo "Successfully deployed $PACKAGE_NAME@$PACKAGE_VERSION"

      - name: Cleanup
        if: always()
        run: |
          # Clean up temporary files containing secrets
          rm -f "worker-vars.env"
          rm -f "worker-secrets.env"
          # Clean up temp directory if it exists
          SANITIZED_PACKAGE_NAME="${{ steps.sanitize.outputs.name }}"
          TEMP_DIR="deploy_${SANITIZED_PACKAGE_NAME}_${{ github.run_id }}_${{ github.run_attempt }}"
          rm -rf "$TEMP_DIR"
